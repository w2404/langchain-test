Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Skip to main content
🦜🔗 LangChain 0.0.168

Getting Started

Quickstart Guide
Modules

Models
Prompts
Indexes
Getting Started
Document Loaders
Text Splitters
Vectorstores
Retrievers
Memory
Chains
Agents
Callbacks
Use Cases

Agents
Autonomous Agents
Agent Simulations
Question Answering over Docs
Chatbots
Querying Tabular Data
Code Understanding
Interacting with APIs
Summarization
Extraction
Evaluation
Reference

Installation
Integrations
API References
Ecosystem

LangChain Ecosystem
Additional Resources

LangChainHub
Glossary
LangChain Gallery
Deployments
Tracing
Discord
YouTube
Production Support
 
v: latest
Getting Started
LangChain primary focuses on constructing indexes with the goal of using them as a Retriever. In order to best understand what this means, it’s worth highlighting what the base Retriever interface is. The BaseRetriever class in LangChain is as follows:

from abc import ABC, abstractmethod
from typing import List
from langchain.schema import Document

from langchain.document_loaders import TextLoader
loader = TextLoader('../state_of_the_union.txt', encoding='utf8')
One Line Index Creation
To get started as quickly as possible, we can use the VectorstoreIndexCreator.

from langchain.indexes import VectorstoreIndexCreator
index = VectorstoreIndexCreator().from_loaders([loader])
Running Chroma using direct local API.
Using DuckDB in-memory for database. Data will be transient.
Now that the index is created, we can use it to ask questions of the data! Note that under the hood this is actually doing a few steps as well, which we will cover later in this guide.

pip install chromadb
This example showcases question answering over documents. We have chosen this as the example for getting started because it nicely combines a lot of different elements (Text splitters, embeddings, vectorstores) and then also shows how to use them in a chain.

Question answering over documents consists of four steps:

Create an index

Create a Retriever from that index

Create a question answering chain

Ask questions!

Each of the steps has multiple sub steps and potential configurations. In this notebook we will primarily focus on (1). We will start by showing the one-liner for doing so, but then break down what is actually going on.

First, let’s import some common classes we’ll use no matter what.

from langchain.chains import RetrievalQA
from langchain.llms import OpenAI
Next in the generic setup, let’s specify the document loader we want to use. You can download the state_of_the_union.txt file here

index_creator = VectorstoreIndexCreator(
    vectorstore_cls=Chroma, 
    embedding=OpenAIEmbeddings(),
    text_splitter=CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
)
Hopefully this highlights what is going on under the hood of VectorstoreIndexCreator. While we think it’s important to have a simple way to create indexes, we also think it’s important to understand what’s going on under the hood.

Previous

Indexes

Next

Document Loaders

Contents
One Line Index Creation
Walkthrough
By Harrison Chase

© Copyright 2023, Harrison Chase.
Last updated on May 13, 2023.
🦜
🔗

CTRL + K

Question: 描述下这篇文档的内容
Helpful Answer: